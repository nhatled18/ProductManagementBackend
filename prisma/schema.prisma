// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or "mysql", "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  fullName  String   @map("full_name")
  email     String?  @unique
  role      String   @default("user")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  transactions Transaction[]
  historyLogs  HistoryLog[]

  @@map("User")
}

model Product {
  id          Int      @id @default(autoincrement())
  productName String   @map("product_name")
  sku         String   @unique
  group       String   @default("")
  stockType1  String   @default("") @map("stock_type1")
  stockType2  String   @default("") @map("stock_type2")
  project     String   @default("")
  unit        String   @default("")
  note        String   @default("")
  cost        Float    @default(0)
  retailPrice Float    @default(0) @map("retail_price")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  inventories  Inventory[]
  transactions Transaction[]
  historyLogs  HistoryLog[]

  @@index([sku])
  @@index([group])
  @@map("Product")
}

model Inventory {
  id           Int      @id @default(autoincrement())
  productId    Int      @map("product_id")
  stockType1   String   @default("") @map("stock_type1")
  stockType2   String   @default("") @map("stock_type2")
  retailPrice  Float    @default(0) @map("retail_price")
  cost         Float    @default(0)
  initialStock Int      @default(0) @map("initial_stock")
  displayStock Int      @default(0) @map("display_stock")
  stockIn      Int      @default(0) @map("stock_in")
  stockOut     Int      @default(0) @map("stock_out")
  damaged      Int      @default(0)
  endingStock  Int      @default(0) @map("ending_stock")
  note         String   @default("")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([stockType1])
  @@map("Inventory")
}

model Transaction {
  id              Int      @id @default(autoincrement())
  productId       Int      @map("product_id")
  userId          Int?     @map("user_id")
  type            String
  transactionCode String   @default("") @map("transaction_code")
  summary         String   @default("")
  createdBy       String   @default("") @map("created_by")
  quantity        Int
  unitPrice       Float    @default(0) @map("unit_price")
  reason          String   @default("")
  note            String   @default("")
  date            DateTime @default(now())
  createdAt       DateTime @default(now()) @map("created_at")

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User?   @relation(fields: [userId], references: [id])

  @@index([productId])
  @@index([type])
  @@index([date])
  @@index([transactionCode])
  @@map("Transaction")
}

model HistoryLog {
  id          Int      @id @default(autoincrement())
  action      String
  productId   Int?     @map("product_id")
  userId      Int?     @map("user_id")
  productName String   @map("product_name")
  productSku  String   @map("product_sku")
  details     String   @default("")
  createdAt   DateTime @default(now()) @map("created_at")

  product Product? @relation(fields: [productId], references: [id])
  user    User?    @relation(fields: [userId], references: [id])

  @@index([productId])
  @@index([action])
  @@index([createdAt])
  @@map("HistoryLog")
}